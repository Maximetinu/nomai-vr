From 50395175ea2c688da954530ef497700b8c8ef85a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jacopo=20Lib=C3=A8?= <jacopo.libe@gmail.com>
Date: Thu, 29 Apr 2021 16:41:42 +0200
Subject: [PATCH] Hacky solution for a SteamVR bug

---
 Unity/Assets/SteamVR/Input/SteamVR_Behaviour_Skeleton.cs       | 21 +++---
 Unity/Assets/SteamVR/Input/SteamVR_Skeleton_Poser.cs   | 69 ++++++++++---------
 3 files changed, 48 insertions(+), 47 deletions(-)

diff --git a/Unity/Assets/SteamVR/Input/SteamVR_Behaviour_Skeleton.cs b/Unity/Assets/SteamVR/Input/SteamVR_Behaviour_Skeleton.cs
index 3cd3a01..1db2071 100644
--- a/Unity/Assets/SteamVR/Input/SteamVR_Behaviour_Skeleton.cs
+++ b/Unity/Assets/SteamVR/Input/SteamVR_Behaviour_Skeleton.cs
@@ -1,5 +1,5 @@
 ﻿//======= Copyright (c) Valve Corporation, All rights reserved. ===============
-
+// WARNING: This file was modified for NomaiVR, if you are updating SteamVR be sure that these changes are merged
 using System.Collections;
 using UnityEngine;
 
@@ -372,10 +372,12 @@ protected virtual void UpdateSkeleton()
             if (updatePose)
                 UpdatePose();
 
+            Vector3[] bonePositions = GetBonePositions();
+            Quaternion[] boneRotations = GetBoneRotations();
+
             if (blendPoser != null && skeletonBlend < 1)
             {
-                if (blendSnapshot == null) blendSnapshot = blendPoser.GetBlendedPose(this);
-                blendSnapshot = blendPoser.GetBlendedPose(this);
+                blendSnapshot = blendPoser.GetBlendedPose(this, bonePositions, boneRotations);
             }
 
             if (rangeOfMotionBlendRoutine == null)
@@ -385,7 +387,7 @@ protected virtual void UpdateSkeleton()
                 else
                     skeletonAction.SetRangeOfMotion(rangeOfMotion); //this may be a frame behind
 
-                UpdateSkeletonTransforms();
+                UpdateSkeletonTransforms(bonePositions, boneRotations);
             }
         }
 
@@ -436,7 +438,7 @@ public void SetRangeOfMotion(EVRSkeletalMotionRange newRangeOfMotion, float blen
         public void BlendToSkeleton(float overTime = 0.1f)
         {
             if (blendPoser != null)
-                blendSnapshot = blendPoser.GetBlendedPose(this);
+                blendSnapshot = blendPoser.GetBlendedPose(this, skeletonAction.bonePositions, skeletonAction.boneRotations);
             blendPoser = null;
             BlendTo(1, overTime);
         }
@@ -628,11 +630,8 @@ protected virtual Quaternion GetBlendPoseForBone(int boneIndex, Quaternion skele
             return poseRotation;
         }
 
-        public virtual void UpdateSkeletonTransforms()
+        public virtual void UpdateSkeletonTransforms(Vector3[] bonePositions, Quaternion[] boneRotations)
         {
-            Vector3[] bonePositions = GetBonePositions();
-            Quaternion[] boneRotations = GetBoneRotations();
-
             if (skeletonBlend <= 0)
             {
                 if (blendPoser != null)
@@ -801,7 +800,7 @@ protected Vector3[] GetBonePositions()
                 //fallback to getting skeleton pose from skeletonPoser
                 if (fallbackPoser != null)
                 {
-                    return fallbackPoser.GetBlendedPose(skeletonAction, inputSource).bonePositions;
+                    return fallbackPoser.GetBlendedPose(skeletonAction, inputSource, skeletonAction.bonePositions, skeletonAction.boneRotations).bonePositions;
                 }
                 else
                 {
@@ -833,7 +832,7 @@ protected Quaternion[] GetBoneRotations()
                 //fallback to getting skeleton pose from skeletonPoser
                 if (fallbackPoser != null)
                 {
-                    return fallbackPoser.GetBlendedPose(skeletonAction, inputSource).boneRotations;
+                    return fallbackPoser.GetBlendedPose(skeletonAction, inputSource, skeletonAction.bonePositions, skeletonAction.boneRotations).boneRotations;
                 }
                 else
                 {
diff --git a/Unity/Assets/SteamVR/Input/SteamVR_Skeleton_Poser.cs b/Unity/Assets/SteamVR/Input/SteamVR_Skeleton_Poser.cs
index ad7ca22..2a28a89 100644
--- a/Unity/Assets/SteamVR/Input/SteamVR_Skeleton_Poser.cs
+++ b/Unity/Assets/SteamVR/Input/SteamVR_Skeleton_Poser.cs
@@ -1,4 +1,5 @@
 ﻿//======= Copyright (c) Valve Corporation, All rights reserved. ===============
+// WARNING: This file was modified for NomaiVR, if you are updating SteamVR be sure that these changes are merged
 
 using System.Collections.Generic;
 using UnityEngine;
@@ -170,9 +171,9 @@ private SteamVR_Skeleton_PoseSnapshot GetHandSnapshot(SteamVR_Input_Sources inpu
         /// </summary>
         /// <param name="forAction">The skeleton action you want to blend between</param>
         /// <param name="handType">If this is for the left or right hand</param>
-        public SteamVR_Skeleton_PoseSnapshot GetBlendedPose(SteamVR_Action_Skeleton skeletonAction, SteamVR_Input_Sources handType)
+        public SteamVR_Skeleton_PoseSnapshot GetBlendedPose(SteamVR_Action_Skeleton skeletonAction, SteamVR_Input_Sources handType, Vector3[] bonePositions, Quaternion[] boneRotations)
         {
-            UpdatePose(skeletonAction, handType);
+            UpdatePose(skeletonAction, handType, bonePositions, boneRotations);
             return GetHandSnapshot(handType);
         }
 
@@ -180,16 +181,16 @@ public SteamVR_Skeleton_PoseSnapshot GetBlendedPose(SteamVR_Action_Skeleton skel
         /// Retrieve the final animated pose, to be applied to a hand skeleton
         /// </summary>
         /// <param name="skeletonBehaviour">The skeleton behaviour you want to get the action/input source from to blend between</param>
-        public SteamVR_Skeleton_PoseSnapshot GetBlendedPose(SteamVR_Behaviour_Skeleton skeletonBehaviour)
+        public SteamVR_Skeleton_PoseSnapshot GetBlendedPose(SteamVR_Behaviour_Skeleton skeletonBehaviour, Vector3[] bonePositions, Quaternion[] boneRotations)
         {
-            return GetBlendedPose(skeletonBehaviour.skeletonAction, skeletonBehaviour.inputSource);
+            return GetBlendedPose(skeletonBehaviour.skeletonAction, skeletonBehaviour.inputSource, bonePositions, boneRotations);
         }
 
 
         /// <summary>
         /// Updates all pose animation and blending. Can be called from different places without performance concerns, as it will only let itself run once per frame.
         /// </summary>
-        public void UpdatePose(SteamVR_Action_Skeleton skeletonAction, SteamVR_Input_Sources inputSource)
+        public void UpdatePose(SteamVR_Action_Skeleton skeletonAction, SteamVR_Input_Sources inputSource, Vector3[] bonePositions, Quaternion[] boneRotations)
         {
             // only allow this function to run once per frame
             if (poseUpdatedThisFrame) return;
@@ -199,14 +200,14 @@ public void UpdatePose(SteamVR_Action_Skeleton skeletonAction, SteamVR_Input_Sou
             if (skeletonAction.activeBinding)
             {
                 // always do additive animation on main pose
-                blendPoses[0].UpdateAdditiveAnimation(skeletonAction, inputSource);
+                blendPoses[0].UpdateAdditiveAnimation(skeletonAction, inputSource, bonePositions, boneRotations);
             }
 
             //copy from main pose as a base
             SteamVR_Skeleton_PoseSnapshot snap = GetHandSnapshot(inputSource);
             snap.CopyFrom(blendPoses[0].GetHandSnapshot(inputSource));
 
-            ApplyBlenderBehaviours(skeletonAction, inputSource, snap);
+            ApplyBlenderBehaviours(skeletonAction, inputSource, snap, bonePositions, boneRotations);
 
 
             if (inputSource == SteamVR_Input_Sources.RightHand)
@@ -215,7 +216,7 @@ public void UpdatePose(SteamVR_Action_Skeleton skeletonAction, SteamVR_Input_Sou
                 blendedSnapshotL = snap;
         }
 
-        protected void ApplyBlenderBehaviours(SteamVR_Action_Skeleton skeletonAction, SteamVR_Input_Sources inputSource, SteamVR_Skeleton_PoseSnapshot snapshot)
+        protected void ApplyBlenderBehaviours(SteamVR_Action_Skeleton skeletonAction, SteamVR_Input_Sources inputSource, SteamVR_Skeleton_PoseSnapshot snapshot, Vector3[] bonePositions, Quaternion[] boneRotations)
         {
 
             // apply blending for each behaviour
@@ -228,7 +229,7 @@ protected void ApplyBlenderBehaviours(SteamVR_Action_Skeleton skeletonAction, St
                     if (blendingBehaviours[behaviourIndex].pose != 0 && skeletonAction.activeBinding)
                     {
                         // update additive animation only as needed
-                        blendPoses[blendingBehaviours[behaviourIndex].pose].UpdateAdditiveAnimation(skeletonAction, inputSource);
+                        blendPoses[blendingBehaviours[behaviourIndex].pose].UpdateAdditiveAnimation(skeletonAction, inputSource, bonePositions, boneRotations);
                     }
 
                     blendingBehaviours[behaviourIndex].ApplyBlending(snapshot, blendPoses, inputSource);
@@ -290,7 +291,7 @@ public SteamVR_Skeleton_PoseSnapshot GetHandSnapshot(SteamVR_Input_Sources input
                 }
             }
 
-            public void UpdateAdditiveAnimation(SteamVR_Action_Skeleton skeletonAction, SteamVR_Input_Sources inputSource)
+            public void UpdateAdditiveAnimation(SteamVR_Action_Skeleton skeletonAction, SteamVR_Input_Sources inputSource, Vector3[] bonePositions, Quaternion[] boneRotations)
             {
                 if (skeletonAction.GetSkeletalTrackingLevel() == EVRSkeletalTrackingLevel.VRSkeletalTracking_Estimated)
                 {
@@ -314,14 +315,14 @@ public void UpdateAdditiveAnimation(SteamVR_Action_Skeleton skeletonAction, Stea
                     if (extensionType == SteamVR_Skeleton_FingerExtensionTypes.Extend)
                     {
                         // lerp to open pose by fingercurl
-                        snapshot.bonePositions[boneIndex] = Vector3.Lerp(poseHand.bonePositions[boneIndex], skeletonAction.bonePositions[boneIndex], 1 - skeletonAction.fingerCurls[fingerIndex]);
-                        snapshot.boneRotations[boneIndex] = Quaternion.Lerp(poseHand.boneRotations[boneIndex], skeletonAction.boneRotations[boneIndex], 1 - skeletonAction.fingerCurls[fingerIndex]);
+                        snapshot.bonePositions[boneIndex] = Vector3.Lerp(poseHand.bonePositions[boneIndex], bonePositions[boneIndex], 1 - skeletonAction.fingerCurls[fingerIndex]);
+                        snapshot.boneRotations[boneIndex] = Quaternion.Lerp(poseHand.boneRotations[boneIndex], boneRotations[boneIndex], 1 - skeletonAction.fingerCurls[fingerIndex]);
                     }
                     if (extensionType == SteamVR_Skeleton_FingerExtensionTypes.Contract)
                     {
                         // lerp to closed pose by fingercurl
-                        snapshot.bonePositions[boneIndex] = Vector3.Lerp(poseHand.bonePositions[boneIndex], skeletonAction.bonePositions[boneIndex], skeletonAction.fingerCurls[fingerIndex]);
-                        snapshot.boneRotations[boneIndex] = Quaternion.Lerp(poseHand.boneRotations[boneIndex], skeletonAction.boneRotations[boneIndex], skeletonAction.fingerCurls[fingerIndex]);
+                        snapshot.bonePositions[boneIndex] = Vector3.Lerp(poseHand.bonePositions[boneIndex], bonePositions[boneIndex], skeletonAction.fingerCurls[fingerIndex]);
+                        snapshot.boneRotations[boneIndex] = Quaternion.Lerp(poseHand.boneRotations[boneIndex], boneRotations[boneIndex], skeletonAction.fingerCurls[fingerIndex]);
                     }
                 }
             }
@@ -436,26 +437,26 @@ public enum BlenderTypes
 
 
         //this is broken
-        public Vector3 GetTargetHandPosition(SteamVR_Behaviour_Skeleton hand, Transform origin)
-        {
-            Vector3 oldOrigin = origin.position;
-            Quaternion oldHand = hand.transform.rotation;
-            hand.transform.rotation = GetBlendedPose(hand).rotation;
-            origin.position = hand.transform.TransformPoint(GetBlendedPose(hand).position);
-            Vector3 offset = origin.InverseTransformPoint(hand.transform.position);
-            origin.position = oldOrigin;
-            hand.transform.rotation = oldHand;
-            return origin.TransformPoint(offset);
-        }
-
-        public Quaternion GetTargetHandRotation(SteamVR_Behaviour_Skeleton hand, Transform origin)
-        {
-            Quaternion oldOrigin = origin.rotation;
-            origin.rotation = hand.transform.rotation * GetBlendedPose(hand).rotation;
-            Quaternion offsetRot = Quaternion.Inverse(origin.rotation) * hand.transform.rotation;
-            origin.rotation = oldOrigin;
-            return origin.rotation * offsetRot;
-        }
+        //public Vector3 GetTargetHandPosition(SteamVR_Behaviour_Skeleton hand, Transform origin)
+        //{
+        //    Vector3 oldOrigin = origin.position;
+        //    Quaternion oldHand = hand.transform.rotation;
+        //    hand.transform.rotation = GetBlendedPose(hand).rotation;
+        //    origin.position = hand.transform.TransformPoint(GetBlendedPose(hand).position);
+        //    Vector3 offset = origin.InverseTransformPoint(hand.transform.position);
+        //    origin.position = oldOrigin;
+        //    hand.transform.rotation = oldHand;
+        //    return origin.TransformPoint(offset);
+        //}
+        //
+        //public Quaternion GetTargetHandRotation(SteamVR_Behaviour_Skeleton hand, Transform origin)
+        //{
+        //    Quaternion oldOrigin = origin.rotation;
+        //    origin.rotation = hand.transform.rotation * GetBlendedPose(hand).rotation;
+        //    Quaternion offsetRot = Quaternion.Inverse(origin.rotation) * hand.transform.rotation;
+        //    origin.rotation = oldOrigin;
+        //    return origin.rotation * offsetRot;
+        //}
     }
 
     /// <summary>
